SELECT
  i.relname :: text AS name,
  am.amname :: text AS type,
  ARRAY(
    SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)
    FROM generate_subscripts(idx.indkey, 1) AS k ORDER BY k
  ) AS columns,
  idx.indisunique AS is_unique,
  idx.indisprimary AS is_primary,
  (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,
  idx.indpred IS NOT NULL AS is_partial
FROM pg_index AS idx
JOIN pg_class AS i ON i.oid = idx.indexrelid
JOIN pg_am AS am ON i.relam = am.oid
JOIN pg_namespace AS ns ON i.relnamespace = ns.OID
WHERE idx.indrelid = 'test_get_table_composite_primary_key_struct' :: REGCLASS

CREATE TEMPORARY TABLE IF NOT EXISTS "test_get_table_composite_primary_key_struct" ()

ALTER TABLE "test_get_table_composite_primary_key_struct" ADD COLUMN "col1" text not null default ''

ALTER TABLE "test_get_table_composite_primary_key_struct" ADD COLUMN "col2" text not null default ''

ALTER TABLE "test_get_table_composite_primary_key_struct" ADD COLUMN "col3" text not null default ''

CREATE UNIQUE INDEX CONCURRENTLY "test_get_table_composite_primary_key_struct_pk" ON "test_get_table_composite_primary_key_struct" ("col1", "col2")

ALTER TABLE "test_get_table_composite_primary_key_struct" ADD CONSTRAINT "test_get_table_composite_primary_key_struct_pk" PRIMARY KEY USING INDEX "test_get_table_composite_primary_key_struct_pk"

INSERT INTO test_get_table_composite_primary_key_struct (col1, col2, col3) VALUES ('1', '2', 'bar'), ('3', '4', 'bar'), ('5', '6', 'abc')

SELECT "col1", "col2", "col3" FROM "test_get_table_composite_primary_key_struct" WHERE "col1" = $1 AND "col2" = $2 LIMIT 1 ... with args:
([]interface {}) (len=2) {
  (*postgres.field)(Col1 = 3 (string)),
  (*postgres.field)(Col2 = 4 (string))
}


